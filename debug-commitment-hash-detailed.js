import { ethers } from 'ethers';

/**
 * Debug detallado del problema de commitmentHash entre frontend y contrato
 */

// Simulaci√≥n de commitment point
const exampleCommitment = {
  x: BigInt('98765432109876543210987654321098765432109876543210987654321098765432'),
  y: BigInt('12345678901234567890123456789012345678901234567890123456789012345678')
};

console.log('üîç DEBUG: An√°lisis detallado del problema commitmentHash');
console.log('='.repeat(70));

// 1. Hash como lo hace el contrato Solidity
console.log('\n1Ô∏è‚É£ HASH DEL CONTRATO (Solidity):');
const contractHash = ethers.keccak256(
  ethers.solidityPacked(['uint256', 'uint256'], [exampleCommitment.x, exampleCommitment.y])
);
console.log('‚úÖ Hash completo (32 bytes):', contractHash);
console.log('   Longitud:', contractHash.length, 'caracteres');

// 2. Hash truncado como se muestra en logs del frontend
console.log('\n2Ô∏è‚É£ HASH TRUNCADO (Frontend logs):');
const truncatedHash = contractHash.slice(0, 10) + '...';
console.log('‚ùå Hash truncado (solo logs):', truncatedHash);
console.log('   Longitud:', truncatedHash.length, 'caracteres');

// 3. Verificar si el problema est√° en comparaci√≥n de strings
console.log('\n3Ô∏è‚É£ PROBLEMA POTENCIAL:');
console.log('   - Contrato espera:', contractHash);
console.log('   - Si frontend env√≠a truncado:', truncatedHash);
console.log('   - ¬øSon iguales?', contractHash === truncatedHash);

// 4. Simulaci√≥n de b√∫squeda en mapping del contrato
console.log('\n4Ô∏è‚É£ SIMULACI√ìN B√öSQUEDA EN CONTRATO:');
console.log('   mapping(bytes32 => UTXO) commitmentHashToUTXO');
console.log('   B√∫squeda con hash completo ‚úÖ:', `commitmentHashToUTXO[${contractHash}]`);
console.log('   B√∫squeda con hash truncado ‚ùå:', `commitmentHashToUTXO[${truncatedHash}] -> NO EXISTE`);

// 5. Verificar encoding
console.log('\n5Ô∏è‚É£ VERIFICACI√ìN ENCODING:');
console.log('   solidityPacked vs otras opciones:');

// Opciones de encoding
const option1 = ethers.keccak256(ethers.solidityPacked(['uint256', 'uint256'], [exampleCommitment.x, exampleCommitment.y]));
const option2 = ethers.keccak256(ethers.concat([
  ethers.zeroPadValue(ethers.toBeHex(exampleCommitment.x), 32),
  ethers.zeroPadValue(ethers.toBeHex(exampleCommitment.y), 32)
]));

console.log('   solidityPacked:', option1);
console.log('   concat/zeroPad:', option2);
console.log('   ¬øSon iguales?', option1 === option2);

// 6. Simular c√≥mo se almacena en UTXO
console.log('\n6Ô∏è‚É£ SIMULACI√ìN ALMACENAMIENTO UTXO:');

// Como se almacena en DepositAsPrivateUTXO.ts (l√≠nea 307)
const storedCommitmentHash = ethers.keccak256(ethers.solidityPacked(['uint256', 'uint256'], [exampleCommitment.x, exampleCommitment.y]));
console.log('   Stored commitmentHash (completo):', storedCommitmentHash);

// Como se muestra en logs (l√≠nea 317)
const logCommitmentHash = ethers.keccak256(ethers.solidityPacked(['uint256', 'uint256'], [exampleCommitment.x, exampleCommitment.y])).slice(0, 10) + '...';
console.log('   Log commitmentHash (truncado):', logCommitmentHash);

// 7. Conclusi√≥n
console.log('\n7Ô∏è‚É£ CONCLUSI√ìN:');
console.log('‚úÖ El hash se almacena CORRECTAMENTE (completo) en el UTXO');
console.log('‚úÖ Solo se trunca en los LOGS para legibilidad');
console.log('‚ùå El problema debe estar en otro lugar...');

// 8. Investigar otros problemas potenciales
console.log('\n8Ô∏è‚É£ OTRAS POSIBLES CAUSAS:');
console.log('   A) ¬øEl UTXO no se guard√≥ correctamente en el contrato?');
console.log('   B) ¬øLa b√∫squeda en el contrato falla por otro motivo?');
console.log('   C) ¬øEl commitment se almacena como hash en lugar de coordenadas?');
console.log('   D) ¬øEl nullifier ya se us√≥ en una operaci√≥n anterior?');

console.log('\n' + '='.repeat(70));
